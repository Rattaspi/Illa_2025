using System.Collections;
using System.Collections.Generic;
using ArtNet.Packets;
using JetBrains.Annotations;
using NUnit.Framework;

namespace ArtNet.Tests.Core.Packets
{
    public class PollReplyPacketTest
    {
        [Test]
        public void TestPollReplyPacketSerialization()
        {
            var tests = new[]
            {
                new
                {
                    Packet = new PollReplyPacket(),
                    Expected = new byte[]
                    {
                        0x41, 0x72, 0x74, 0x2D, 0x4E, 0x65, 0x74, 0x00, // "Art-Net\0"
                        0x00, 0x21, // OpCode(PollReply)
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00
                    }
                },
                new
                {
                    Packet = new PollReplyPacket
                    {
                        IpAddress = new byte[] { 10, 0, 0, 1 },
                        Port = 0x1936,
                        VersionInfo = 0x000E,
                        NetSwitch = 0x00,
                        SubSwitch = 0x00,
                        Oem = 0x0000,
                        UbeaVersion = 0x00,
                        Status1 = 0x00,
                        EstaCode = 0x0000,
                        ShortName = "TestShortName",
                        LongName = "TestLongName",
                        NodeReport = "TestNodeReport",
                        NumPorts = 0x0004,
                        PortTypes = new byte[] { 0x00, 0x00, 0x00, 0x00 },
                        InputStatus = new byte[] { 0x00, 0x00, 0x00, 0x00 },
                        OutputStatus = new byte[] { 0x00, 0x00, 0x00, 0x00 },
                        InputSubSwitch = new byte[] { 0x00, 0x00, 0x00, 0x00 },
                        OutputSubSwitch = new byte[] { 0x00, 0x00, 0x00, 0x00 },
                        SwVideo = 0x00,
                        SwMacro = 0x00,
                        SwRemote = 0x00,
                        Spares = new byte[] { 0x00, 0x00, 0x00 },
                        Style = 0x00,
                        MacAddress = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                        BindIpAddress = new byte[] { 0x00, 0x00, 0x00, 0x00 },
                        BindIndex = 0x00,
                        Status2 = 0x00,
                        Filter = new byte[26]
                    },
                    Expected = new byte[]
                    {
                        0x41, 0x72, 0x74, 0x2D, 0x4E, 0x65, 0x74, 0x00, // "Art-Net\0"
                        0x00, 0x21, // OpCode(PollReply)
                        0x0A, 0x00, 0x00, 0x01, 0x36, 0x19, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x54, 0x65, 0x73, 0x74, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x54, 0x65, 0x73, 0x74, 0x4C, 0x6F, 0x6E, 0x67, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x54, 0x65, 0x73, 0x74, 0x4E, 0x6F, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6F, 0x72, 0x74,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00
                    }
                }
            };

            foreach (var test in tests)
            {
                var packet = test.Packet;
                var expected = test.Expected;

                AssertPollReplyPacket(packet, expected);
            }
        }

        private static void AssertPollReplyPacket([NotNull] PollReplyPacket packet, IEnumerable expected)
        {
            var serializedData = packet.ToByteArray();
            Assert.IsNotNull(serializedData);

            CollectionAssert.AreEqual(expected, serializedData);
            var deserializedPacket = ArtNetPacket.FromByteArray<PollReplyPacket>(serializedData);
            Assert.IsNotNull(deserializedPacket);

            Assert.AreEqual(packet.OpCode, deserializedPacket.OpCode);
            Assert.AreEqual(packet.IsNeedProtocolVersion, deserializedPacket.IsNeedProtocolVersion);
        }

        private static IEnumerable<TestCaseData> InvalidPollReplyPacketBytesTestCases
        {
            get
            {
                yield return new TestCaseData(new byte[]
                    {
                        0x41, 0x72, 0x74, 0x2D, 0x4E, 0x65, 0x74, 0x00,
                        0x00, 0x21,
                        0x00, 0x0E,
                        0x00
                    })
                    .SetName("Body too short");
            }
        }

        [TestCaseSource(nameof(InvalidPollReplyPacketBytesTestCases))]
        public void TestInvalidPollReplyPacketBytes(byte[] invalidData)
        {
            var deserializedPacket = ArtNetPacket.FromByteArray<PollReplyPacket>(invalidData);
            Assert.IsNull(deserializedPacket);
        }
    }
}
